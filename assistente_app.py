# assistente_app.py (Vers√£o Completa - Corre√ß√£o Duplica√ß√£o)

import streamlit as st
import pandas as pd
import plotly.express as px
import io
import traceback
import os
import re

from langchain_community.chat_message_histories import StreamlitChatMessageHistory

# <<< Importa a fun√ß√£o de inicializa√ß√£o do agente.py >>>
agent_module_imported = False
inicializar_agent_executor = None
try:
    # Garante que agente.py est√° completo e sem erros de sintaxe antes de importar
    print("--- DEBUG APP: Tentando importar 'inicializar_agent_executor' de 'agente.py'... ---")
    import sys
    # Adiciona o diret√≥rio atual ao path para garantir a importa√ß√£o correta
    sys.path.insert(0, os.path.dirname(__file__)) 
    from agente import inicializar_agent_executor
    print("--- DEBUG APP: Fun√ß√£o 'inicializar_agent_executor' importada com sucesso. ---")
    agent_module_imported = True
except ModuleNotFoundError:
    st.error("Erro Cr√≠tico: O arquivo 'agente.py' n√£o foi encontrado.")
    st.info("Certifique-se de que 'agente.py' est√° no mesmo diret√≥rio que 'assistente_app.py'.")
    st.stop()
except ImportError as e:
    st.error(f"Erro Cr√≠tico ao importar ou durante a inicializa√ß√£o do 'agente.py': {e}")
    st.info("Isso pode ser um erro de sintaxe DENTRO do 'agente.py' ou uma depend√™ncia faltando. Verifique o terminal.")
    traceback.print_exc(); st.stop()
except Exception as e: # Pega outros erros que podem ocorrer durante a carga do agente.py
    st.error(f"Erro inesperado ao importar/configurar 'agente.py': {e}")
    st.info("Verifique o console/terminal para detalhes do erro em 'agente.py'.")
    traceback.print_exc(); st.stop()

# <<< Bloco para tratar pergunta sobre capacidades diretamente >>>
CAPABILITIES_TEXT = """
Ol√°! Eu sou a Marina, sua assistente de dados da Supply Marine. Minhas principais fun√ß√µes s√£o:

* **Consultar Vendas:** Posso calcular totais (geral, anual, mensal) e resumos mensais, baseados na data de recebimento da PO, opcionalmente filtrados por regime Naval/Offshore. (Ex: `vendas totais`, `vendas naval 2023`, `vendas offshore maio 2024`, `vendas por mes`).
* **Consultar Faturamento:** Calcular Faturamento Bruto e L√≠quido (geral, anual, mensal) e resumos mensais, baseados na data de faturamento e status espec√≠ficos, opcionalmente filtrados por regime Naval/Offshore. (Ex: `faturamento bruto total`, `faturamento l√≠quido offshore 2024`, `faturamento naval por mes`).
* **Verificar BMs Pendentes:** Contar o total (geral, anual) e resumos mensais de BMs pendentes (libera√ß√£o nula e relat√≥rio enviado), baseados na data de envio do relat√≥rio, opcionalmente filtrados por regime Naval/Offshore. (Ex: `BMs pendentes total`, `bms offshore 2024`, `bms naval por mes`).
* **Verificar Relat√≥rios Pendentes:** Contar o total (geral, anual, mensal) e resumos mensais de relat√≥rios pendentes (envio nulo), baseados na data final do atendimento, opcionalmente filtrados por regime Naval/Offshore. (Ex: `relat√≥rios pendentes`, `relat√≥rios naval 2023`, `relat√≥rios offshore por mes`).
* **Gerar Relat√≥rio Gerencial:** Criar um resumo di√°rio (YTD) com os principais indicadores e gr√°ficos. (Use: 'relat√≥rio gerencial', 'relat√≥rio do dia').
* **Executar SQL:** Tentar responder perguntas mais complexas com consultas SQL SELECT diretas (se habilitado).
* **Buscar em Documentos:** Procurar informa√ß√µes contextuais em documentos da base de conhecimento (se habilitado).

Em que posso te ajudar com essas fun√ß√µes hoje?
"""
CAPABILITIES_TRIGGERS = [
    "o que voc√™ pode fazer", "o que voce pode fazer", "quais suas fun√ß√µes",
    "quais sao suas funcoes", "qual sua fun√ß√£o", "qual sua funcao", "suas fun√ß√µes",
    "suas funcoes", "como pode me ajudar", "como voce me ajuda", "no que voc√™ √© √∫til",
    "no que voce e util", "suas habilidades", "suas capacidades", "listar fun√ß√µes",
    "listar funcoes", "o que voc√™ faz", "o que voce faz"
]
def check_for_capabilities_question(prompt: str) -> bool:
    if not prompt: return False
    prompt_lower = prompt.lower().strip('?.,! ').replace('-', ' ')
    for trigger in CAPABILITIES_TRIGGERS:
        if trigger in prompt_lower:
            # Verifica se o prompt √© curto e cont√©m o gatilho (evita pegar em frases longas)
            if len(prompt_lower) < len(trigger) + 15: return True 
    return False

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="Marina Supply", 
    page_icon="marina.png", # Certifique-se que 'marina.png' est√° na mesma pasta
    layout="wide"
)

# --- Inicializa√ß√£o do Session State ---
if 'last_table_markdown' not in st.session_state: st.session_state.last_table_markdown = None
if 'plot_fig' not in st.session_state: st.session_state.plot_fig = None
if 'user_input_trigger' not in st.session_state: st.session_state.user_input_trigger = False
if 'clicked_suggestion' not in st.session_state: st.session_state.clicked_suggestion = None


# --- T√≠tulo e Interface ---
col_left, col_center, col_right = st.columns([1, 3, 1], gap="small")
with col_center:
    image_path = "marina.png"
    try:
        if os.path.exists(image_path): st.image(image_path, width=450)
        else: st.warning(f"Imagem '{image_path}' n√£o encontrada.")
    except Exception as img_err: st.error(f"Erro ao carregar imagem: {img_err}")

# --- Sidebar ---
st.sidebar.info("""
**Marina - Assistente de Dados**
Ferramenta experimental para consulta de dados da Supply Marine.

**Funcionalidades:**
- Vendas (Geral, Ano, M√™s, Resumo Mensal)
- Faturamento Bruto/L√≠quido (Geral, Ano, M√™s, Resumo Mensal)
- BMs Pendentes (Total, Ano, Resumo Mensal)
- Relat√≥rios Pendentes (Total, Ano, M√™s, Resumo Mensal)
- Relat√≥rio Gerencial Di√°rio (YTD)

*Use linguagem natural para suas perguntas.*
""")
st.sidebar.markdown("---") 
if st.sidebar.button("üóëÔ∏è Limpar Hist√≥rico", key="clear_history_button"):
    # Limpa o hist√≥rico da Langchain/Streamlit e outros estados relacionados
    if "langchain_chat_history_supply_final_v2" in st.session_state:
        del st.session_state["langchain_chat_history_supply_final_v2"] # Remove a chave do hist√≥rico
    if 'agent_executor_initialized' in st.session_state:
        del st.session_state['agent_executor_initialized'] # For√ßa reinicializa√ß√£o do agente
    st.session_state.plot_fig = None 
    st.session_state.last_table_markdown = None 
    st.session_state.user_input_trigger = False
    st.session_state.clicked_suggestion = None
    print("--- DEBUG APP: Hist√≥rico e estados relacionados limpos pelo bot√£o. ---")
    st.rerun() # Recarrega a p√°gina para refletir a limpeza


# <<< SUGEST√ïES DE PERGUNTAS >>>
if agent_module_imported:
    st.markdown("---")
    st.markdown("<small>Tente perguntar algo como:</small>", unsafe_allow_html=True)
    suggestions = [
        "Qual o total de vendas?", "BMs pendentes por mes", "Faturamento bruto 2024",
        "Relat√≥rios pendentes total", "Faturamento l√≠quido maio 2024", "O que voc√™ pode fazer?",
        "Relatorio gerencial"
    ]
    num_cols = 3
    cols = st.columns(num_cols)
    for i, suggestion in enumerate(suggestions):
        with cols[i % num_cols]:
            if st.button(suggestion, key=f"suggestion_{i}_final_v3", help=f"Perguntar: {suggestion}", use_container_width=True): # Chave atualizada
                st.session_state.clicked_suggestion = suggestion
                st.session_state.user_input_trigger = True
                st.rerun()
    st.markdown("---")
else:
    st.warning("M√≥dulo do agente n√£o foi carregado corretamente, sugest√µes desabilitadas.")

# --- Gerenciamento da Mem√≥ria e Hist√≥rico de Chat ---
# A chave agora √© usada para buscar/criar o hist√≥rico
msgs = StreamlitChatMessageHistory(key="langchain_chat_history_supply_final_v2") 

# --- Inicializa√ß√£o do Agente Executor (apenas uma vez por sess√£o) ---
agent_executor = None
if inicializar_agent_executor:
    if 'agent_executor_initialized' not in st.session_state:
        print("--- DEBUG APP: Tentando inicializar Agent Executor pela primeira vez... ---")
        with st.spinner("Inicializando a Marina... üöÄ"):
            # Passa o objeto de hist√≥rico 'msgs' para o inicializador
            st.session_state.agent_executor_initialized = inicializar_agent_executor(chat_message_history=msgs) 
        if not st.session_state.agent_executor_initialized:
            st.error("Falha Cr√≠tica: N√£o foi poss√≠vel inicializar o Agente Executor. Verifique a chave API no .env e os logs do terminal para erros detalhados em agente.py.")
            print("--- ERRO APP: inicializar_agent_executor retornou None. Verifique erros em agente.py ou no terminal. ---")
            st.stop()
        else:
             print("--- DEBUG APP: Agent Executor inicializado com sucesso e armazenado na sess√£o. ---")
    # Sempre pega o executor da sess√£o depois de inicializado ou se j√° existia
    agent_executor = st.session_state.get('agent_executor_initialized') 
else:
     # Este caso n√£o deve ocorrer se o try/except na importa√ß√£o funcionar
     if agent_module_imported: 
        st.error("Erro: A fun√ß√£o de inicializa√ß√£o do agente n√£o p√¥de ser carregada.")
        st.stop()

# --- Mensagem Inicial e Exibi√ß√£o do Hist√≥rico ---
# Adiciona a mensagem inicial APENAS se o hist√≥rico estiver vazio E o agente estiver pronto
if agent_executor and len(msgs.messages) == 0: 
    msgs.add_ai_message("Ol√°! Eu sou a Marina, sua assistente de dados da Supply Marine. Como posso te ajudar hoje?")

chat_display_area = st.container()
with chat_display_area:
    # Limpa plot/tabela anterior se houve novo input do usu√°rio (antes de processar e exibir o novo)
    if st.session_state.user_input_trigger:
        st.session_state.last_table_markdown = None
        st.session_state.plot_fig = None

    # Exibe mensagens do hist√≥rico
    for msg_idx, msg in enumerate(msgs.messages):
        with st.chat_message(msg.type):
            if msg.type == "ai" and isinstance(msg.content, str) and msg.content.strip().startswith("<!DOCTYPE html>"):
                print(f"--- DEBUG APP: Renderizando mensagem AI (√≠ndice {msg_idx}) como HTML. ---")
                st.markdown(msg.content, unsafe_allow_html=True)
            else:
                st.write(msg.content) # Renderiza como texto/markdown padr√£o

    # L√≥gica do Bot√£o Gerar Gr√°fico (s√≥ aparece se houver tabela na √∫ltima resposta AI)
    if st.session_state.last_table_markdown:
        st.markdown("---")
        if st.button("üìä Gerar Gr√°fico", key="plot_button_final_v3"): # Nova chave
            print(f"--- DEBUG APP: Bot√£o Gerar Gr√°fico clicado. Markdown guardado: {st.session_state.last_table_markdown[:200]}...")
            markdown_content = st.session_state.last_table_markdown
            # Regex para extrair a tabela markdown (simplificada)
            table_match = re.search(r"(\s*\|.*\|\s*\n\s*\|(?: *\:?-+?\:? *\|)+?\s*\n(?: *\|.*\|\s*\n?)+)", markdown_content, re.MULTILINE)
            if table_match:
                table_md = table_match.group(1).strip()
                print(f"--- DEBUG APP: Markdown da tabela extra√≠do para plotagem:\n{table_md}")
                try:
                    # Usa StringIO para ler o markdown como se fosse um CSV com separador |
                    lines = table_md.split('\n')
                    # Pega o cabe√ßalho removendo pipes extras e espa√ßos
                    header_line = lines[0]
                    header = [h.strip() for h in re.sub(r"(^ *\||\| *$)", "", header_line).split('|')]
                    # Pega linhas de dados, remove pipes extras
                    data_lines = [re.sub(r"(^ *\||\| *$)", "", line.strip()) for line in lines[2:] if line.strip()]
                    if not data_lines: raise ValueError("Nenhuma linha de dados encontrada.")
                    
                    data_io = io.StringIO("\n".join(data_lines))
                    df = pd.read_csv(data_io, sep='|', names=header, skipinitialspace=True)
                    
                    # Limpa espa√ßos extras em todas as c√©lulas
                    df = df.map(lambda x: x.strip() if isinstance(x, str) else x)
                    print(f"--- DEBUG APP: DataFrame parseado para plotagem:\n{df.head()}")

                    if df.empty or len(df.columns) < 2:
                        st.warning("N√£o foi poss√≠vel extrair dados v√°lidos da tabela para o gr√°fico.")
                    else:
                        x_col = df.columns[0] # Assume primeira coluna como X
                        y_col = df.columns[1] # Assume segunda coluna como Y
                        
                        df_plot = df[[x_col, y_col]].copy()

                        # Tenta limpar a coluna Y para ser num√©rica (remove R$, ., troca , por .)
                        def clean_numeric_column(series):
                            if series.dtype == 'object':
                                series_cleaned = series.astype(str).str.replace('R$', '', regex=False).str.strip()
                                series_cleaned = series_cleaned.str.replace('.', '', regex=False) 
                                series_cleaned = series_cleaned.str.replace(',', '.', regex=False) 
                                return pd.to_numeric(series_cleaned, errors='coerce')
                            return pd.to_numeric(series, errors='coerce') 

                        df_plot[y_col] = clean_numeric_column(df_plot[y_col])
                        df_plot.dropna(subset=[y_col], inplace=True) # Remove linhas onde Y n√£o p√¥de ser convertido
                        
                        print(f"--- DEBUG APP: DataFrame para plotar (Y limpo):\n{df_plot.head()}")

                        if not df_plot.empty:
                            title = f"Gr√°fico: {y_col.replace('_', ' ').title()} por {x_col.title()}"
                            try:
                                fig = px.bar(df_plot, x=x_col, y=y_col, title=title, text_auto='.2s')
                                fig.update_traces(textposition='outside')
                                fig.update_layout(xaxis_title=x_col.title(), yaxis_title=y_col.replace('_', ' ').title())
                                st.session_state.plot_fig = fig # Armazena a figura na sess√£o
                                print(f"--- DEBUG APP: Gr√°fico Plotly gerado e armazenado na sess√£o. ---")
                            except Exception as plot_err:
                                st.error(f"Erro ao gerar o gr√°fico com Plotly: {plot_err}")
                                print(f"--- ERRO APP: Plotly falhou: {plot_err} ---")
                                traceback.print_exc()
                        else:
                            st.warning("N√£o h√° dados num√©ricos v√°lidos para plotar na coluna Y ap√≥s a limpeza.")
                except Exception as parse_err:
                    st.error(f"Erro ao processar a tabela Markdown para o gr√°fico: {parse_err}")
                    print(f"--- ERRO APP: Parsing da tabela para gr√°fico falhou: {parse_err} ---")
                    traceback.print_exc()
            else:
                st.warning("N√£o encontrei uma tabela formatada na √∫ltima resposta para gerar o gr√°fico.")
                print(f"--- AVISO APP: Regex (plotagem) n√£o encontrou tabela no markdown guardado. ---")
            st.session_state.last_table_markdown = None # Limpa para o bot√£o sumir ap√≥s tentativa
            st.rerun() # Roda novamente para exibir o gr√°fico (ou erro) e remover o bot√£o


    # √Årea para Exibi√ß√£o do Gr√°fico Gerado pelo Bot√£o
    if st.session_state.plot_fig:
        st.markdown("---")
        st.plotly_chart(st.session_state.plot_fig, use_container_width=True)

    # --- √Årea de Input do Usu√°rio ---
    user_prompt = None
    # Reset user_input_trigger *before* checking for new input
    st.session_state.user_input_trigger = False 

    # Input via bot√£o de sugest√£o
    if 'clicked_suggestion' in st.session_state and st.session_state.clicked_suggestion:
        user_prompt = st.session_state.clicked_suggestion
        st.session_state.clicked_suggestion = None # Limpa a sugest√£o clicada
        st.session_state.user_input_trigger = True # Indica que houve um input
        print(f"--- DEBUG APP: Input via SUGEST√ÉO: {user_prompt} ---")

    # Input via campo de chat
    if prompt_from_field := st.chat_input("Fa√ßa sua pergunta sobre os dados...", key="user_text_input_final_v3"): # Nova chave
        user_prompt = prompt_from_field
        st.session_state.user_input_trigger = True # Indica que houve um input
        print(f"--- DEBUG APP: Input via CAMPO DE TEXTO: {user_prompt} ---")

    # --- Processamento do Input e Intera√ß√£o com Agente ---
    if user_prompt:
        # Limpa plot/tabela anterior se usu√°rio iniciou nova intera√ß√£o
        if st.session_state.user_input_trigger:
            print(f"--- DEBUG APP: Novo prompt '{user_prompt[:50]}...', limpando plot_fig e last_table_markdown ANTES do processamento do agente. ---")
            st.session_state.plot_fig = None
            st.session_state.last_table_markdown = None

        # Adiciona mensagem do usu√°rio ao hist√≥rico e exibe
        st.chat_message("user").write(user_prompt)
        # Adiciona ao hist√≥rico da Langchain se for nova ou diferente da √∫ltima
        if not msgs.messages or msgs.messages[-1].type != "user" or msgs.messages[-1].content != user_prompt:
            msgs.add_user_message(user_prompt)

        # Verifica se √© pergunta sobre capacidades
        if check_for_capabilities_question(user_prompt):
            print(f"--- DEBUG APP: Pergunta sobre capacidades ('{user_prompt}'). Respondendo direto. ---")
            st.chat_message("ai").write(CAPABILITIES_TEXT)
            msgs.add_ai_message(CAPABILITIES_TEXT)
            st.session_state.user_input_trigger = False # Reseta o trigger aqui
            st.rerun() # Re-renderiza para mostrar a resposta

        # Se n√£o for pergunta sobre capacidades e o agente estiver pronto, invoca o agente
        elif agent_executor:
            with st.spinner("Marina est√° pensando... üß†"):
                try:
                    print(f"--- DEBUG APP: Invocando agente com input: '{user_prompt[:100]}...' ---")
                    agent_input = {"input": user_prompt} 
                    response = agent_executor.invoke(agent_input) # <<< CHAMADA REAL AO AGENTE >>>

                    ai_response_content = "Desculpe, n√£o obtive uma resposta v√°lida." 
                    if response and isinstance(response, dict) and 'output' in response:
                        ai_response_content = response['output']
                        print(f"--- DEBUG APP: Resposta recebida do agente (tipo: {type(ai_response_content)}). Trecho: {str(ai_response_content)[:200]}... ---")
                        
                        is_html_report = isinstance(ai_response_content, str) and ai_response_content.strip().startswith("<!DOCTYPE html>")
                        has_multiple_pipes = isinstance(ai_response_content, str) and ai_response_content.count('|') > 4 
                        has_separator_line = isinstance(ai_response_content, str) and any(sep in ai_response_content for sep in ["\n|---", "\n|:---", "\n| ---", "\n| :---"])

                        if not is_html_report and has_multiple_pipes and has_separator_line:
                             print(f"--- DEBUG APP: TABELA DETECTADA (gen√©rico) na resposta do AGENTE. Armazenando markdown para bot√£o de gr√°fico. ---")
                             st.session_state.last_table_markdown = ai_response_content
                             st.session_state.plot_fig = None 
                    
                    # A LINHA ABAIXO FOI REMOVIDA/COMENTADA PARA EVITAR DUPLICA√á√ÉO
                    # msgs.add_ai_message(ai_response_content) 

                except Exception as e:
                    error_type_str = type(e).__name__
                    error_details = str(e)
                    st.error(f"Ocorreu um erro t√©cnico ({error_type_str}) ao processar sua pergunta.")
                    print(f"--- ERRO APP: agent_executor.invoke falhou: ---"); traceback.print_exc(); print(f"---")
                    # Adiciona mensagem de erro ao hist√≥rico tamb√©m
                    msgs.add_ai_message(f"Desculpe, encontrei um erro t√©cnico ({error_type_str}) ao tentar responder. Detalhes: {error_details}")

            # Ap√≥s processar (ou falhar), reseta o trigger e re-renderiza
            st.session_state.user_input_trigger = False 
            print(f"--- DEBUG APP: Solicitando rerun ap√≥s invoke/erro do agente. ---")
            st.rerun()

        elif not agent_executor: # Caso o agente n√£o tenha inicializado corretamente
            st.error("O agente n√£o est√° pronto. Verifique os logs do terminal.")
            st.session_state.user_input_trigger = False # Reseta mesmo se falhar

    print("--- DEBUG APP: Fim do script principal assistente_app.py ---")